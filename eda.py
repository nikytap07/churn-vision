import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pylab
import scipy.stats as stats
from phik.report import plot_correlation_matrix
from sklearn.feature_selection import mutual_info_classif
import io

sns.set_style('darkgrid')
current_palette = sns.color_palette('mako', 50)

def get_info(data):
    st.write(data.head())
    st.write(data.describe())
    st.markdown('**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö –∏ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö:**')
    buffer = io.StringIO()
    data.info(buf=buffer)
    s = buffer.getvalue()
    st.text(s)

def qq_plt(data, col):
    stats.probplot(data, dist="norm", plot=pylab)
    plt.title(f'QQ-–≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {col}')
    plt.xlabel('–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–∞–Ω—Ç–∏–ª–∏')
    plt.ylabel('–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')

def plot_mi_scores(scores):
    scores = scores.sort_values(ascending=True)
    width = np.arange(len(scores))
    ticks = list(scores.index)
    fig, ax = plt.subplots()
    ax.barh(width, scores, ec='black', alpha=0.84)
    ax.set_yticks(width)
    ax.set_yticklabels(ticks)
    ax.set_title('–í–∑–∞–∏–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    st.pyplot(fig)

def make_mi_scores(X, y, discrete_features):
    mi_scores = mutual_info_classif(X, y, discrete_features=discrete_features)
    mi_scores = pd.Series(mi_scores, name='MI', index=X.columns).sort_values(ascending=False)
    return mi_scores

def remove_correlated_features(df, threshold=0.9):
    corr_matrix = df.corr().abs()
    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))
    to_drop = [column for column in upper.columns if any(upper[column] > threshold)]
    return df.drop(columns=to_drop)

def run_eda(df, options):
    df.columns = df.columns.str.lower()

    if "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" in options:
        st.subheader("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞")
        get_info(df)
        st.write(f'**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö:** {df.duplicated().sum()}')

    if "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤" in options:
        st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        st.markdown("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫—Ä–∏–≤–æ–π KDE")
        df.hist(bins=50, edgecolor='black', linewidth=2, alpha=0.72, figsize=(15, 15))
        st.pyplot(plt.gcf())

    if "QQ-–≥—Ä–∞—Ñ–∏–∫–∏" in options:
        st.subheader("QQ-–≥—Ä–∞—Ñ–∏–∫–∏")
        st.markdown("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞")
        cols = ['avg_additional_charges_total', 'avg_class_frequency_current_month', 'avg_class_frequency_total']
        fig = plt.figure(figsize=(15, 5))
        for idx, col in enumerate(cols):
            fig.add_subplot(1, 3, idx+1)
            qq_plt(df[col], col)
        plt.tight_layout()
        st.pyplot(fig)

    if "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ churn" in options:
        st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ churn")
        st.markdown("–î–æ–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å churn=1 –∏ churn=0 –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö")
        features = ['gender','near_location','partner','promo_friends','phone','group_visits']
        df.groupby('churn')[features].mean().T.plot(kind='bar', stacked=False, ec='black', alpha=0.72)
        plt.title('–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ—Ç—Ç–æ–∫–∞ –∏ –ª–æ—è–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')
        plt.xlabel('–ü—Ä–∏–∑–Ω–∞–∫')
        plt.ylabel('–î–æ–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
        plt.xticks(rotation=42)
        st.pyplot(plt.gcf())

    if "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ churn" in options:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ churn")
        st.markdown("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–µ–∂–¥—É –ª–æ—è–ª—å–Ω—ã–º–∏ –∏ —É—à–µ–¥—à–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        real_features = ['lifetime', 'month_to_end_contract', 'contract_period', 'age',
                         'avg_class_frequency_total', 'avg_class_frequency_current_month', 'avg_additional_charges_total']
        hist_features = ['contract_period', 'month_to_end_contract','lifetime']
        churn = df[df['churn'] == 1]
        loyal = df[df['churn'] == 0]

        fig, axes = plt.subplots(3, 2, figsize=(20, 20), sharey=True)
        cnt = 20
        for col, ax in zip(real_features, axes.flatten()):
            if col not in hist_features and col != 'avg_additional_charges_total':
                sns.histplot(loyal[col], ax=ax, kde=True, stat="density", color=current_palette[cnt], label="–õ–æ—è–ª—å–Ω—ã–µ")
                sns.histplot(churn[col], ax=ax, kde=True, stat="density", color=current_palette[cnt + 5], label="–û—Ç—Ç–æ–∫")
            else:
                min_ = int(min(df[col]))
                max_ = int(max(df[col]))
                sns.histplot(loyal[col], ax=ax, color=current_palette[cnt], bins=range(min_, max_+2), kde=False, stat="density")
                sns.histplot(churn[col], ax=ax, color=current_palette[cnt + 2], bins=range(min_, max_+2), kde=False, stat="density")
            ax.set_title(f'{col} –ø–æ churn')
            ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
            ax.legend()
            cnt += 2
        plt.tight_layout()
        st.pyplot(fig)

        fig = plt.figure(figsize=(20, 6))
        col = 'avg_additional_charges_total'
        sns.histplot(loyal[col], kde=True, stat="density", color=current_palette[cnt], label="–õ–æ—è–ª—å–Ω—ã–µ")
        sns.histplot(churn[col], kde=True, stat="density", color=current_palette[cnt + 8], label="–û—Ç—Ç–æ–∫")
        plt.legend()
        plt.ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
        plt.title(f'–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–ª—è {col}')
        st.pyplot(fig)

    if "PHIK –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è" in options:
        st.subheader("PHIK –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è üîó")
        st.markdown(
            "Phik (œÜK) ‚Äî —ç—Ç–æ –æ–±–æ–±—â—ë–Ω–Ω–∞—è –º–µ—Ä–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å —á–∏—Å–ª–æ–≤—ã–º–∏, —Ç–∞–∫ –∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏, "
            "–∏ —Å–ø–æ—Å–æ–±–Ω–∞ –≤—ã—è–≤–ª—è—Ç—å –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏. –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–∞ –≤ —Ä–∞–∑–≤–µ–¥–æ—á–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö (EDA)."
        )
        interval = [c for c in df.columns if c != 'churn']
        phik_overview = df.phik_matrix(interval_cols=interval)

        plot_correlation_matrix(
            phik_overview.values,
            x_labels=phik_overview.columns,
            y_labels=phik_overview.index,
            vmin=0, vmax=1,
            color_map="Blues",
            title=r"–ú–∞—Ç—Ä–∏—Ü–∞ œÜK-–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (phik)",
            fontsize_factor=.9,
            figsize=(15, 12)
        )
        st.pyplot(plt.gcf())

    if "–í–∑–∞–∏–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (MI)" in options:
        st.subheader("–í–∑–∞–∏–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (MI)")
        st.markdown(
            "–ù–µ–ª–∏–Ω–µ–π–Ω–∞—è –º–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `churn`. "
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–∞—é—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –≤–∫–ª–∞–¥ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ."
        )

        new_df = remove_correlated_features(df, threshold=0.9)
        X = new_df.copy()
        y = X.pop('churn')
        discrete_features = X.dtypes == int
        mi_scores = make_mi_scores(X, y, discrete_features)
        plot_mi_scores(mi_scores)

        dropped = list(set(df.columns) - set(new_df.columns))
        st.markdown(f"üßπ **–£–¥–∞–ª–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑-–∑–∞ —Å–∏–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏**: `{dropped}`")

        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)")
        st.markdown(
            "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. "
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞."
        )
        fig = plt.figure(figsize=(15, 12))
        sns.heatmap(new_df.corr(), square=True, annot=True, fmt=".2f", cmap='Blues', linewidths=.42, vmax=.95)
        plt.title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏')
        st.pyplot(fig)

    return df
